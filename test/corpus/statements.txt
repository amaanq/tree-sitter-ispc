================================================================================
Coherent control flow: cif
================================================================================

cif (x < y) {
    uniform int u;
}

cif (x < y) {
    uniform int u;
} else {
    varying int v;
}

---

(translation_unit
    (cif_statement
        condition: (parenthesized_expression
            (binary_expression
                left: (identifier)
                right: (identifier)
            )
        )
        consequence: (compound_statement
            (declaration
                (type_qualifier)
                type: (primitive_type)
                declarator: (identifier)
            )
        )
    )

    (cif_statement
        condition: (parenthesized_expression
            (binary_expression
                left: (identifier)
                right: (identifier)
            )
        )
        consequence: (compound_statement
            (declaration
                (type_qualifier)
                type: (primitive_type)
                declarator: (identifier)
            )
        )
        alternative: (compound_statement
            (declaration
                (type_qualifier)
                type: (primitive_type)
                declarator: (identifier)
            )
        )
    )
)

================================================================================
Coherent control flow: cwhile
================================================================================

cwhile (true) {
}

---

(translation_unit
    (cwhile_statement
        condition: (parenthesized_expression
            (true)
        )
        body: (compound_statement)
    )
)

================================================================================
Coherent control flow: cdo
================================================================================

cdo {
} while (true);

---

(translation_unit
    (cdo_statement
        body: (compound_statement)
        condition: (parenthesized_expression
            (true)
        )
    )
)

================================================================================
Coherent control flow: cfor
================================================================================

cfor (;;) {
}

cfor (int i = 0; i < 10; i++) {
}

---

(translation_unit
    (cfor_statement
        body: (compound_statement)
    )
    (cfor_statement
        initializer: (declaration
            type: (primitive_type)
            declarator: (init_declarator
                declarator: (identifier)
                value: (number_literal)
            )
        )
        condition: (binary_expression
            left: (identifier)
            right: (number_literal)
        )
        update: (update_expression
            argument: (identifier)
        )
        body: (compound_statement)
    )
)

================================================================================
Foreach loop: range, multi-dimensional
================================================================================

foreach (ix = 0 ... Nx) {
}

foreach (ix = 0 ... Nx, iy = 0 ... Ny) {
}

foreach_tiled (ix = 0 ... Nx) {
}

foreach_tiled (ix = 0 ... Nx, iy = 0 ... Ny) {
}

---

(translation_unit
    (foreach_statement
        range_start: (assignment_expression
            left: (identifier)
            right: (number_literal)
        )
        (range_operator)
        range_end: (identifier)
        body: (compound_statement)
    )
    (foreach_statement
        range_start: (assignment_expression
            left: (identifier)
            right: (number_literal)
        )
        (range_operator)
        range_end: (identifier)
        range_start: (assignment_expression
            left: (identifier)
            right: (number_literal)
        )
        (range_operator)
        range_end: (identifier)
        body: (compound_statement)
    )

    (foreach_statement
        range_start: (assignment_expression
            left: (identifier)
            right: (number_literal)
        )
        (range_operator)
        range_end: (identifier)
        body: (compound_statement)
    )
    (foreach_statement
        range_start: (assignment_expression
            left: (identifier)
            right: (number_literal)
        )
        (range_operator)
        range_end: (identifier)
        range_start: (assignment_expression
            left: (identifier)
            right: (number_literal)
        )
        (range_operator)
        range_end: (identifier)
        body: (compound_statement)
    )
)

================================================================================
Foreach loop: intra-gang
================================================================================

foreach_active (i) {
}

foreach_unique (i in x) {
}

---

(translation_unit
    (foreach_instance_statement
        initializer: (identifier)
        body: (compound_statement)
    )

    (foreach_instance_statement
        initializer: (identifier)
        (in_operator)
        condition: (identifier)
        body: (compound_statement)
    )
)

================================================================================
Unmasked compound statement
================================================================================

unmasked {
    ++count;
}

---

(translation_unit
    (unmasked_statement
        ispc_special: (unmasked)
        body: (compound_statement
            (expression_statement
                (update_expression
                    argument: (identifier)
                )
            )
        )
    )
)

================================================================================
Launch and sync statement
================================================================================

void launch_task() {
    launch task();
    sync;
}

void launch_task() {
    launch[10] task();
    sync;
}

void launch_task() {
    launch[10][n] task();
    sync;
}

void launch_task() {
    launch[10, n, m] task();
    sync;
}

---

(translation_unit
    (function_definition
        type: (primitive_type)
        declarator: (function_declarator
            declarator: (identifier)
            parameters: (parameter_list)
        )
        body: (compound_statement
            (launch_statement
                ispc_special: (launch)
                (call_expression
                    function: (identifier)
                    arguments: (argument_list)
                )
            )
            (sync_statement
                ispc_special: (sync)
            )
        )
    )

    (function_definition
        type: (primitive_type)
        declarator: (function_declarator
            declarator: (identifier)
            parameters: (parameter_list)
        )
        body: (compound_statement
            (launch_statement
                ispc_special: (launch)
                launch_config: (number_literal)
                (call_expression
                    function: (identifier)
                    arguments: (argument_list)
                )
            )
            (sync_statement
                ispc_special: (sync)
            )
        )
    )

    (function_definition
        type: (primitive_type)
        declarator: (function_declarator
            declarator: (identifier)
            parameters: (parameter_list)
        )
        body: (compound_statement
            (launch_statement
                ispc_special: (launch)
                launch_config: (number_literal)
                launch_config: (identifier)
                (call_expression
                    function: (identifier)
                    arguments: (argument_list)
                )
            )
            (sync_statement
                ispc_special: (sync)
            )
        )
    )

    (function_definition
        type: (primitive_type)
        declarator: (function_declarator
            declarator: (identifier)
            parameters: (parameter_list)
        )
        body: (compound_statement
            (launch_statement
                ispc_special: (launch)
                launch_config: (number_literal)
                launch_config: (identifier)
                launch_config: (identifier)
                (call_expression
                    function: (identifier)
                    arguments: (argument_list)
                )
            )
            (sync_statement
                ispc_special: (sync)
            )
        )
    )
)

================================================================================
New statement
================================================================================

uniform float * uniform p1 = uniform new uniform float[10];
float * uniform p2 = uniform new float[10];
float * p3 = new float[10];
varying float * p4 = new varying float[10];
float * p5 = new float;
Point * p6 = new Point(1,2,3);

---

(translation_unit
    (new_statement
        (type_qualifier)
        type: (primitive_type)
        declarator: (pointer_declarator
            (type_qualifier)
            declarator: (identifier)
        )
        (type_qualifier)
        ispc_special: (new_operator)
        (type_qualifier)
        type: (primitive_type)
        size: (number_literal)
    )

    (new_statement
        type: (primitive_type)
        declarator: (pointer_declarator
            (type_qualifier)
            declarator: (identifier)
        )
        (type_qualifier)
        ispc_special: (new_operator)
        type: (primitive_type)
        size: (number_literal)
    )

    (new_statement
        type: (primitive_type)
        declarator: (pointer_declarator
            declarator: (identifier)
        )
        ispc_special: (new_operator)
        type: (primitive_type)
        size: (number_literal)
    )

    (new_statement
        (type_qualifier)
        type: (primitive_type)
        declarator: (pointer_declarator
            declarator: (identifier)
        )
        ispc_special: (new_operator)
        (type_qualifier)
        type: (primitive_type)
        size: (number_literal)
    )

    (new_statement
        type: (primitive_type)
        declarator: (pointer_declarator
            declarator: (identifier)
        )
        ispc_special: (new_operator)
        type: (primitive_type)
    )

    (new_statement
        type: (type_identifier)
        declarator: (pointer_declarator
            declarator: (identifier)
        )
        ispc_special: (new_operator)
        type: (type_identifier)
        initializer: (parenthesized_expression
            (comma_expression
                left: (number_literal)
                right: (comma_expression
                    left: (number_literal)
                    right: (number_literal)
                )
            )
        )
    )
)

================================================================================
Delete statement
================================================================================

delete[] p1;
delete Point;

---

(translation_unit
    (delete_statement
        ispc_special: (delete_operator)
        (identifier)
    )
    (delete_statement
        ispc_special: (delete_operator)
        (identifier)
    )
)

================================================================================
Operator overload
================================================================================

struct S operator*(struct S a, struct S b) {
}

---

(translation_unit
    (function_definition
        type: (struct_specifier
            name: (type_identifier)
        )
        declarator: (operator_declarator
            declarator: (overload_operator)
            parameters: (parameter_list
                (parameter_declaration
                    type: (struct_specifier
                        name: (type_identifier)
                    )
                    declarator: (identifier)
                )
                (parameter_declaration
                    type: (struct_specifier
                        name: (type_identifier)
                    )
                    declarator: (identifier)
                )
            )
        )
        body: (compound_statement)
    )
)

================================================================================
C++ style references
================================================================================

void f(float &v) {
    const float &cr = v;
    float const &cr = v;
}

---

(translation_unit
    (function_definition
        type: (primitive_type)
        declarator: (function_declarator
            declarator: (identifier)
            parameters: (parameter_list
                (parameter_declaration
                    type: (primitive_type)
                    declarator: (reference_declarator
                        declarator: (identifier)
                    )
                )
            )
        )
        body: (compound_statement
            (declaration
                (type_qualifier)
                type: (primitive_type)
                declarator: (init_declarator
                    declarator: (reference_declarator
                        declarator: (identifier)
                    )
                    value: (identifier)
                )
            )
            (declaration
                type: (primitive_type)
                (type_qualifier)
                declarator: (init_declarator
                    declarator: (reference_declarator
                        declarator: (identifier)
                    )
                    value: (identifier)
                )
            )
        )
    )
)
